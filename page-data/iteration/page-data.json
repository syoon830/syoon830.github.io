{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/iteration/","result":{"data":{"markdownRemark":{"html":"<p>이터레이션 프로토콜(iteration protocol)은 데이터 컬렉션을 순회하기 위한 규칙과 약속이다.</p>\n<p>이 이터레이션 프로토콜(iteration protocol)에는 이터러블 프로토콜(iterable protocol)과 이터레이터 프로토콜(iterator protocol)이 있다.</p>\n<p>(용어가 비슷비슷해서 헷갈린다...)</p>\n<p><strong>이터러블 프로토콜(iterable protocol): [Symbol.iterator]()를 가지고 있음</strong></p>\n<p><strong>이터레이터 프로토콜(iterator protocol): { next() { return { value: any, done: boolean } } } 형태의 객체를 가지고 있음</strong></p>\n<h3>이터러블</h3>\n<p><strong>이터러블 프로토콜을 준수한 객체를 이터러블이라 한다.</strong></p>\n<p>Array는 Symbol.iterator를 가지고 있다. 따라서 Array는 이터러블 프로토콜을 준수한 이터러블이다.</p>\n<p>Array 외에도 Map, Set, String, TypedArray등이 이터러블 프로토콜을 준수한 이터러블이다.</p>\n<p>- Array, String, Map, Set, TypedArray(Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array), DOM data structure(NodeList, HTMLCollection), Arguments</p>\n<p>Object, Number, Boolean 등의 일반 객체는 Symbol.iterator 소유하고 있지 않다. 따라서 이터러블 프로토콜을 준수한 이터러블이 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h3>이터레이터</h3>\n<p><strong>Symbol.iterator 메소드를 통해 반환 받은 객체를 이터레이터한다. 이 이터레이터는 이터레이터 프로토콜을 준수한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 이터러블 프로토콜을 준수한 객체다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Symbol.iterator 메소드는 이터레이터를 반환한다.</span>\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 이터레이터 프로토콜을 준수한 객체다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next\"</span> <span class=\"token keyword\">in</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span> <span class=\"token keyword\">in</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span> <span class=\"token keyword\">in</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3>for of 문</h3>\n<p>내부적으로 이터레이터의 next 메소드를 호출하여 <strong>done이 ture일때 까지 순회하며</strong> 변수에 value값을 할당한다.</p>\n<p><a href=\"https://poiemaweb.com/es6-iteration-for-of\">poiemaweb.com/es6-iteration-for-of</a></p>","frontmatter":{"title":"이터레이션","date":"2020.11.30"}}},"pageContext":{"id":"0aaf74bf-25cf-5ff2-af24-749cff9bd840"}},"staticQueryHashes":["3159585216"]}