{"version":3,"sources":["webpack:///./src/components/utterances.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Utterances","React","repo","containerRef","createRef","useEffect","utterances","document","createElement","attributes","src","label","theme","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","BlogPostTemplate","post","data","markdownRemark","title","frontmatter","date","content","html","className","dangerouslySetInnerHTML","__html","itemProp"],"mappings":"0IASMA,EAAyCC,QAC7C,YAAgC,IAA7BC,EAA6B,EAA7BA,KACKC,EAAeC,sBAuBrB,OArBAC,qBAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IAdI,gCAeJR,OACA,aAAc,WACdS,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQP,GAAYQ,SAAQ,YAAkB,IAAhBC,EAAgB,KAAXC,EAAW,KACnDb,EAAWc,aAAaF,EAAKC,MAE3BhB,GAAgBA,EAAakB,SAC/BlB,EAAakB,QAAQC,YAAYhB,KAElC,CAACH,EAAcD,IAEX,uBAAKqB,IAAKpB,OAIrBH,EAAWwB,YAAc,aAEVxB,QCCAyB,UAxBU,SAAC,GAAmD,IACrEC,EADqE,EAAjDC,KACRC,eACVC,EAAUH,EAAKI,YAAfD,MACAE,EAASL,EAAKI,YAAdC,KACFC,EAAUN,EAAKO,KACrB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,uBAAKC,UAAU,eACb,uBAAKA,UAAU,SAASL,GACxB,uBAAKK,UAAU,QAAQH,IAEzB,uBAAKG,UAAU,iBACb,2BACEC,wBAAyB,CAAEC,OAAQJ,GACnCK,SAAS,iBAGb,gBAAC,EAAD,CAAYnC,KAAK","file":"component---src-templates-blog-post-tsx-9584e470e066a3ac1cb9.js","sourcesContent":["import * as React from 'react';\nimport { createRef, useEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\n\nexport interface IUtterancesProps {\n  repo: string;\n}\n\nconst Utterances: React.FC<IUtterancesProps> = React.memo(\n  ({ repo }: IUtterancesProps) => {\n    const containerRef = createRef<HTMLDivElement>();\n\n    useEffect(() => {\n      const utterances = document.createElement('script');\n\n      const attributes = {\n        src,\n        repo,\n        'issue-term': 'pathname',\n        label: 'comment',\n        theme: 'github-light',\n        crossOrigin: 'anonymous',\n        async: 'true',\n      };\n\n      Object.entries(attributes).forEach(([key, value]) => {\n        utterances.setAttribute(key, value);\n      });\n      if (containerRef && containerRef.current) {\n        containerRef.current.appendChild(utterances);\n      }\n    }, [containerRef, repo]);\n\n    return <div ref={containerRef} />;\n  }\n);\n\nUtterances.displayName = 'Utterances';\n\nexport default Utterances;\n","import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport { StyledPost } from '../style/Styles';\nimport Utterances from '../components/utterances';\n\ntype DataType = {\n  markdownRemark: {\n    frontmatter: {\n      title: string;\n      date: string;\n    };\n    html: string;\n  };\n};\n\nconst BlogPostTemplate = ({ data }: PageProps<DataType>): React.ReactNode => {\n  const post = data.markdownRemark;\n  const { title } = post.frontmatter;\n  const { date } = post.frontmatter;\n  const content = post.html;\n  return (\n    <Layout>\n      <StyledPost>\n        <div className=\"post-header\">\n          <div className=\"title\">{title}</div>\n          <div className=\"date\">{date}</div>\n        </div>\n        <div className=\"markdown-body\">\n          <section\n            dangerouslySetInnerHTML={{ __html: content }}\n            itemProp=\"articleBody\"\n          />\n        </div>\n        <Utterances repo=\"syoon830/syoon830.github.io\" />\n      </StyledPost>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY.MM.DD\")\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}